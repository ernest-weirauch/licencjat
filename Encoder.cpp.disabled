#include "Encoder.h"

Encoder::Encoder(){}

Encoder::Encoder(int pin) {
  //Use statusPin to flash along with interrupts
  pinMode(pin_encoderLeft, INPUT);  //stala PIN ENKODERA

  //Interrupt 0 is digital pin 2, so that is where the IR detector is connected
  //Triggers on FALLING (change from HIGH to LOW)
  attachInterrupt(digitalPinToInterrupt(pin), counter, FALLING); //((void*)  

  // Initialize
  pulses = 0;
  rpm = 0;
  timeold = 0;
}

int Encoder::getRpm() {
  if (millis() - timeold >= 1000) { /*Uptade every one second, this will be equal to reading frecuency (Hz).*/

    //Don't process interrupts during calculations
    detachInterrupt(0);
    //Note that this would be 60*1000/(millis() - timeold)*pulses if the interrupt
    //happened once per revolution
    rpm = (60 * 1000 / pulsesperturn ) / (millis() - timeold) * pulses;
    timeold = millis();
    pulses = 0;

    ////Write it out to serial port
    //Serial.print("RPM = ");
    //Serial.println(rpm, DEC);
    
    //Restart the interrupt processing
    attachInterrupt(digitalPinToInterrupt(pin), counter, FALLING); //(void*)
    return rpm;
  }
}

void counter()
{
  //Update count
  pulses++;
}
